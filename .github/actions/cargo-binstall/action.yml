name: Install tools with cargo-binstall

inputs:
  args:
    required: true

runs:
  using: composite
  steps:
    - run: bash --version
      shell: bash

    - name: Install cargo-binstall *
      run: |
        CARGO_BINSTALL_BIN_DIR=/tmp/cargo-binstall
        case "$OS" in
          Windows)
            CARGO_BINSTALL_URL_SUFFIX=x86_64-pc-windows-msvc.zip
            CARGO_BINSTALL_EXE_SUFFIX=.exe;;
          macOS)
            CARGO_BINSTALL_URL_SUFFIX=x86_64-apple-darwin.zip
            CARGO_BINSTALL_EXE_SUFFIX=;;
          Linux)
            CARGO_BINSTALL_URL_SUFFIX=x86_64-unknown-linux-musl.tgz
            CARGO_BINSTALL_EXE_SUFFIX=;;
        esac
        CARGO_BINSTALL_URL="https://github.com/ryankurte/cargo-binstall/releases/latest/download/cargo-binstall-$CARGO_BINSTALL_URL_SUFFIX"
        CARGO_BINSTALL_ARCHIVE_EXT="${CARGO_BINSTALL_URL##*.}"
        CARGO_BINSTALL_ARCHIVE_PATH="/tmp/cargo-binstall.$CARGO_BINSTALL_ARCHIVE_EXT"

        mkdir -p "$CARGO_BINSTALL_BIN_DIR"
        curl --proto =https --tlsv1.2 -fL --retry 10 --retry-connrefused "$CARGO_BINSTALL_URL" -o "$CARGO_BINSTALL_ARCHIVE_PATH"
        case "$CARGO_BINSTALL_ARCHIVE_EXT" in
          zip) 7z x "$CARGO_BINSTALL_ARCHIVE_PATH" "-o$CARGO_BINSTALL_BIN_DIR";;
          tgz) tar xvf "$CARGO_BINSTALL_ARCHIVE_PATH" -C "$CARGO_BINSTALL_BIN_DIR";;
        esac
        rm "$CARGO_BINSTALL_ARCHIVE_PATH"
        export PATH="$CARGO_BINSTALL_BIN_DIR:$PATH"
        echo "Installed $CARGO_BINSTALL_BIN_DIR/cargo-binstall$CARGO_BINSTALL_EXE_SUFFIX" >&2

        if [ ! -d "${CARGO_HOME:-"$HOME/.cargo"}/bin" ]; then
          mkdir -p "${CARGO_HOME:-"$HOME/.cargo"}/bin"
        fi

        jq '.[]' -c <<<"$ARGS" | while read -r arg; do
          crate="$(jq .crate -r <<<"$arg")"
          version="$(jq .version -r <<<"$arg")"
          pkg_url="$(jq .pkg_url -r <<<"$arg")"
          pkg_fmt="$(jq .pkg_fmt -r <<<"$arg")"
          cargo binstall "$crate" --version "$version" --pkg-url "$pkg_url" --pkg-fmt "$pkg_fmt" --log-level debug --no-confirm
        done
      shell: bash
      env:
        OS: ${{ runner.os }}
        ARGS: ${{ inputs.args }}
